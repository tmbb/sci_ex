// ==================================================================================
// THIS FILE HAS BEEN AUTOGENERATED - Do not edit directly
// ----------------------------------------------------------------------------------
// Edit the template at 'priv/rust_generator/templates/math_functions.rs' instead
// ==================================================================================

use ndarray::{Array1, Array2, Array3, Array4, Array5, Array6};
use libm;
use crate::datatypes::*;

<%= for f <- @functions do %><%= if f.args == [] do %>
#[rustler::nif]
pub fn <%= f.sci_ex_nif_name %>(ex_array: ExFloat<%= f.nr_of_bits %>Array<%= f.nr_of_dimensions %>) -> ExFloat<%= f.nr_of_bits %>Array<%= f.nr_of_dimensions %> {
    let array: &Array<%= f.nr_of_dimensions %><f<%= f.nr_of_bits %>> = &ex_array.resource.0;
    let result: Array<%= f.nr_of_dimensions %><f<%= f.nr_of_bits %>> = array.mapv(<%= f.rs_module %>::<%= f.rs_function %>);
    ExFloat<%= f.nr_of_bits %>Array<%= f.nr_of_dimensions %>::new(result)
}
<% else %><%
  typed_args = Enum.map(f.args, fn arg -> "#{arg[:name]}: #{arg[:type]}" end) |> Enum.intersperse(", ")
  untyped_args = Enum.map(f.args, fn arg -> arg[:name] end) |> Enum.intersperse(", ")
%>
#[rustler::nif]
pub fn <%= f.sci_ex_nif_name %>(ex_array: ExFloat<%= f.nr_of_bits %>Array<%= f.nr_of_dimensions %>, <%= typed_args %>) -> ExFloat<%= f.nr_of_bits %>Array<%= f.nr_of_dimensions %> {
    let array: &Array<%= f.nr_of_dimensions %><f<%= f.nr_of_bits %>> = &ex_array.resource.0;
    let result: Array<%= f.nr_of_dimensions %><f<%= f.nr_of_bits %>> = array.mapv(|x| <%= f.rs_module %>::<%= f.rs_function %>(x, <%= untyped_args %>));
    ExFloat<%= f.nr_of_bits %>Array<%= f.nr_of_dimensions %>::new(result)
}
<% end %><% end %>
