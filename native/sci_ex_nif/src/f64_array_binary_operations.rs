// ========================================================================================
// THIS FILE HAS BEEN AUTOGENERATED - Do not edit directly
// ----------------------------------------------------------------------------------------
// Edit the template at 'priv/rust_generator/templates/array_binary_operations.rs' instead
// ========================================================================================

use crate::datatypes::*;


// -----------------------------------------
// 1D arrays
// -----------------------------------------

// ADD for 1D arrays and scalars
#[rustler::nif]
pub fn float64_add_array1_array1(a: ExFloat64Array1, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 + &b.resource.0)
}

#[rustler::nif]
pub fn float64_add_array1_scalar(a: ExFloat64Array1, b: f64) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 + b)
}

#[rustler::nif]
pub fn float64_add_scalar_array1(a: f64, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(a + &b.resource.0)
}

// SUBTRACT for 1D arrays and scalars
#[rustler::nif]
pub fn float64_subtract_array1_array1(a: ExFloat64Array1, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 - &b.resource.0)
}

#[rustler::nif]
pub fn float64_subtract_array1_scalar(a: ExFloat64Array1, b: f64) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 - b)
}

#[rustler::nif]
pub fn float64_subtract_scalar_array1(a: f64, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(a - &b.resource.0)
}

// MULTIPLY for 1D arrays and scalars
#[rustler::nif]
pub fn float64_multiply_array1_array1(a: ExFloat64Array1, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 * &b.resource.0)
}

#[rustler::nif]
pub fn float64_multiply_array1_scalar(a: ExFloat64Array1, b: f64) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 * b)
}

#[rustler::nif]
pub fn float64_multiply_scalar_array1(a: f64, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(a * &b.resource.0)
}

// DIVIDE for 1D arrays and scalars
#[rustler::nif]
pub fn float64_divide_array1_array1(a: ExFloat64Array1, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 / &b.resource.0)
}

#[rustler::nif]
pub fn float64_divide_array1_scalar(a: ExFloat64Array1, b: f64) -> ExFloat64Array1 {
  ExFloat64Array1::new(&a.resource.0 / b)
}

#[rustler::nif]
pub fn float64_divide_scalar_array1(a: f64, b: ExFloat64Array1) -> ExFloat64Array1 {
  ExFloat64Array1::new(a / &b.resource.0)
}


// -----------------------------------------
// 2D arrays
// -----------------------------------------

// ADD for 2D arrays and scalars
#[rustler::nif]
pub fn float64_add_array2_array2(a: ExFloat64Array2, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 + &b.resource.0)
}

#[rustler::nif]
pub fn float64_add_array2_scalar(a: ExFloat64Array2, b: f64) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 + b)
}

#[rustler::nif]
pub fn float64_add_scalar_array2(a: f64, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(a + &b.resource.0)
}

// SUBTRACT for 2D arrays and scalars
#[rustler::nif]
pub fn float64_subtract_array2_array2(a: ExFloat64Array2, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 - &b.resource.0)
}

#[rustler::nif]
pub fn float64_subtract_array2_scalar(a: ExFloat64Array2, b: f64) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 - b)
}

#[rustler::nif]
pub fn float64_subtract_scalar_array2(a: f64, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(a - &b.resource.0)
}

// MULTIPLY for 2D arrays and scalars
#[rustler::nif]
pub fn float64_multiply_array2_array2(a: ExFloat64Array2, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 * &b.resource.0)
}

#[rustler::nif]
pub fn float64_multiply_array2_scalar(a: ExFloat64Array2, b: f64) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 * b)
}

#[rustler::nif]
pub fn float64_multiply_scalar_array2(a: f64, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(a * &b.resource.0)
}

// DIVIDE for 2D arrays and scalars
#[rustler::nif]
pub fn float64_divide_array2_array2(a: ExFloat64Array2, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 / &b.resource.0)
}

#[rustler::nif]
pub fn float64_divide_array2_scalar(a: ExFloat64Array2, b: f64) -> ExFloat64Array2 {
  ExFloat64Array2::new(&a.resource.0 / b)
}

#[rustler::nif]
pub fn float64_divide_scalar_array2(a: f64, b: ExFloat64Array2) -> ExFloat64Array2 {
  ExFloat64Array2::new(a / &b.resource.0)
}


// -----------------------------------------
// 3D arrays
// -----------------------------------------

// ADD for 3D arrays and scalars
#[rustler::nif]
pub fn float64_add_array3_array3(a: ExFloat64Array3, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 + &b.resource.0)
}

#[rustler::nif]
pub fn float64_add_array3_scalar(a: ExFloat64Array3, b: f64) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 + b)
}

#[rustler::nif]
pub fn float64_add_scalar_array3(a: f64, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(a + &b.resource.0)
}

// SUBTRACT for 3D arrays and scalars
#[rustler::nif]
pub fn float64_subtract_array3_array3(a: ExFloat64Array3, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 - &b.resource.0)
}

#[rustler::nif]
pub fn float64_subtract_array3_scalar(a: ExFloat64Array3, b: f64) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 - b)
}

#[rustler::nif]
pub fn float64_subtract_scalar_array3(a: f64, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(a - &b.resource.0)
}

// MULTIPLY for 3D arrays and scalars
#[rustler::nif]
pub fn float64_multiply_array3_array3(a: ExFloat64Array3, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 * &b.resource.0)
}

#[rustler::nif]
pub fn float64_multiply_array3_scalar(a: ExFloat64Array3, b: f64) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 * b)
}

#[rustler::nif]
pub fn float64_multiply_scalar_array3(a: f64, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(a * &b.resource.0)
}

// DIVIDE for 3D arrays and scalars
#[rustler::nif]
pub fn float64_divide_array3_array3(a: ExFloat64Array3, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 / &b.resource.0)
}

#[rustler::nif]
pub fn float64_divide_array3_scalar(a: ExFloat64Array3, b: f64) -> ExFloat64Array3 {
  ExFloat64Array3::new(&a.resource.0 / b)
}

#[rustler::nif]
pub fn float64_divide_scalar_array3(a: f64, b: ExFloat64Array3) -> ExFloat64Array3 {
  ExFloat64Array3::new(a / &b.resource.0)
}


// -----------------------------------------
// 4D arrays
// -----------------------------------------

// ADD for 4D arrays and scalars
#[rustler::nif]
pub fn float64_add_array4_array4(a: ExFloat64Array4, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 + &b.resource.0)
}

#[rustler::nif]
pub fn float64_add_array4_scalar(a: ExFloat64Array4, b: f64) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 + b)
}

#[rustler::nif]
pub fn float64_add_scalar_array4(a: f64, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(a + &b.resource.0)
}

// SUBTRACT for 4D arrays and scalars
#[rustler::nif]
pub fn float64_subtract_array4_array4(a: ExFloat64Array4, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 - &b.resource.0)
}

#[rustler::nif]
pub fn float64_subtract_array4_scalar(a: ExFloat64Array4, b: f64) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 - b)
}

#[rustler::nif]
pub fn float64_subtract_scalar_array4(a: f64, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(a - &b.resource.0)
}

// MULTIPLY for 4D arrays and scalars
#[rustler::nif]
pub fn float64_multiply_array4_array4(a: ExFloat64Array4, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 * &b.resource.0)
}

#[rustler::nif]
pub fn float64_multiply_array4_scalar(a: ExFloat64Array4, b: f64) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 * b)
}

#[rustler::nif]
pub fn float64_multiply_scalar_array4(a: f64, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(a * &b.resource.0)
}

// DIVIDE for 4D arrays and scalars
#[rustler::nif]
pub fn float64_divide_array4_array4(a: ExFloat64Array4, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 / &b.resource.0)
}

#[rustler::nif]
pub fn float64_divide_array4_scalar(a: ExFloat64Array4, b: f64) -> ExFloat64Array4 {
  ExFloat64Array4::new(&a.resource.0 / b)
}

#[rustler::nif]
pub fn float64_divide_scalar_array4(a: f64, b: ExFloat64Array4) -> ExFloat64Array4 {
  ExFloat64Array4::new(a / &b.resource.0)
}


// -----------------------------------------
// 5D arrays
// -----------------------------------------

// ADD for 5D arrays and scalars
#[rustler::nif]
pub fn float64_add_array5_array5(a: ExFloat64Array5, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 + &b.resource.0)
}

#[rustler::nif]
pub fn float64_add_array5_scalar(a: ExFloat64Array5, b: f64) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 + b)
}

#[rustler::nif]
pub fn float64_add_scalar_array5(a: f64, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(a + &b.resource.0)
}

// SUBTRACT for 5D arrays and scalars
#[rustler::nif]
pub fn float64_subtract_array5_array5(a: ExFloat64Array5, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 - &b.resource.0)
}

#[rustler::nif]
pub fn float64_subtract_array5_scalar(a: ExFloat64Array5, b: f64) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 - b)
}

#[rustler::nif]
pub fn float64_subtract_scalar_array5(a: f64, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(a - &b.resource.0)
}

// MULTIPLY for 5D arrays and scalars
#[rustler::nif]
pub fn float64_multiply_array5_array5(a: ExFloat64Array5, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 * &b.resource.0)
}

#[rustler::nif]
pub fn float64_multiply_array5_scalar(a: ExFloat64Array5, b: f64) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 * b)
}

#[rustler::nif]
pub fn float64_multiply_scalar_array5(a: f64, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(a * &b.resource.0)
}

// DIVIDE for 5D arrays and scalars
#[rustler::nif]
pub fn float64_divide_array5_array5(a: ExFloat64Array5, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 / &b.resource.0)
}

#[rustler::nif]
pub fn float64_divide_array5_scalar(a: ExFloat64Array5, b: f64) -> ExFloat64Array5 {
  ExFloat64Array5::new(&a.resource.0 / b)
}

#[rustler::nif]
pub fn float64_divide_scalar_array5(a: f64, b: ExFloat64Array5) -> ExFloat64Array5 {
  ExFloat64Array5::new(a / &b.resource.0)
}


// -----------------------------------------
// 6D arrays
// -----------------------------------------

// ADD for 6D arrays and scalars
#[rustler::nif]
pub fn float64_add_array6_array6(a: ExFloat64Array6, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 + &b.resource.0)
}

#[rustler::nif]
pub fn float64_add_array6_scalar(a: ExFloat64Array6, b: f64) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 + b)
}

#[rustler::nif]
pub fn float64_add_scalar_array6(a: f64, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(a + &b.resource.0)
}

// SUBTRACT for 6D arrays and scalars
#[rustler::nif]
pub fn float64_subtract_array6_array6(a: ExFloat64Array6, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 - &b.resource.0)
}

#[rustler::nif]
pub fn float64_subtract_array6_scalar(a: ExFloat64Array6, b: f64) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 - b)
}

#[rustler::nif]
pub fn float64_subtract_scalar_array6(a: f64, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(a - &b.resource.0)
}

// MULTIPLY for 6D arrays and scalars
#[rustler::nif]
pub fn float64_multiply_array6_array6(a: ExFloat64Array6, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 * &b.resource.0)
}

#[rustler::nif]
pub fn float64_multiply_array6_scalar(a: ExFloat64Array6, b: f64) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 * b)
}

#[rustler::nif]
pub fn float64_multiply_scalar_array6(a: f64, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(a * &b.resource.0)
}

// DIVIDE for 6D arrays and scalars
#[rustler::nif]
pub fn float64_divide_array6_array6(a: ExFloat64Array6, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 / &b.resource.0)
}

#[rustler::nif]
pub fn float64_divide_array6_scalar(a: ExFloat64Array6, b: f64) -> ExFloat64Array6 {
  ExFloat64Array6::new(&a.resource.0 / b)
}

#[rustler::nif]
pub fn float64_divide_scalar_array6(a: f64, b: ExFloat64Array6) -> ExFloat64Array6 {
  ExFloat64Array6::new(a / &b.resource.0)
}


