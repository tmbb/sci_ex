// ==================================================================================
// THIS FILE HAS BEEN AUTOGENERATED - Do not edit directly
// ----------------------------------------------------------------------------------
// Edit the template at 'priv/rust_generator/templates/math_functions.rs' instead
// ==================================================================================

use ndarray::{Array1, Array2, Array3, Array4, Array5, Array6};
use libm;
use crate::datatypes::*;


#[rustler::nif]
pub fn float64_acos_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::acos);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_acosh_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::acosh);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_asin_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::asin);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_asinh_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::asinh);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_atan2_array1(ex_array: ExFloat64Array1, other: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::atan2(x, other));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_atan_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::atan);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_atanh_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::atanh);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_cbrt_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::cbrt);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_ceil_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::ceil);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_cos_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::cos);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_cosh_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::cosh);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_div_euclid_array1(ex_array: ExFloat64Array1, rhs: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::div_euclid(x, rhs));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_erf_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::erf);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_erfc_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::erfc);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_exp2_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::exp2);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_exp_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::exp);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_exp_m1_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::exp_m1);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_floor_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::floor);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_fract_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::fract);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_hypot_array1(ex_array: ExFloat64Array1, other: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::hypot(x, other));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_j0_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::j0);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_j1_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::j1);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_lgamma_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::lgamma);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_ln_1p_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::ln_1p);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_ln_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::ln);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_log10_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::log10);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_log2_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::log2);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_log_array1(ex_array: ExFloat64Array1, base: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::log(x, base));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_mul_add_array1(ex_array: ExFloat64Array1, a: f64, b: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::mul_add(x, a, b));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_powf_array1(ex_array: ExFloat64Array1, n: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::powf(x, n));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_powi_array1(ex_array: ExFloat64Array1, n: i32) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::powi(x, n));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_rem_euclid_array1(ex_array: ExFloat64Array1, rhs: f64) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(|x| f64::rem_euclid(x, rhs));
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_round_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::round);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_round_ties_even_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::round_ties_even);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_sin_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::sin);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_sinh_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::sinh);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_sqrt_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::sqrt);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_tan_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::tan);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_tanh_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::tanh);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_trunc_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(f64::trunc);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_y0_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::y0);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_y1_array1(ex_array: ExFloat64Array1) -> ExFloat64Array1 {
    let array: &Array1<f64> = &ex_array.resource.0;
    let result: Array1<f64> = array.mapv(libm::y1);
    ExFloat64Array1::new(result)
}

#[rustler::nif]
pub fn float64_acos_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::acos);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_acosh_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::acosh);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_asin_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::asin);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_asinh_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::asinh);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_atan2_array2(ex_array: ExFloat64Array2, other: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::atan2(x, other));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_atan_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::atan);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_atanh_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::atanh);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_cbrt_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::cbrt);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_ceil_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::ceil);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_cos_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::cos);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_cosh_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::cosh);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_div_euclid_array2(ex_array: ExFloat64Array2, rhs: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::div_euclid(x, rhs));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_erf_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::erf);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_erfc_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::erfc);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_exp2_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::exp2);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_exp_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::exp);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_exp_m1_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::exp_m1);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_floor_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::floor);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_fract_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::fract);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_hypot_array2(ex_array: ExFloat64Array2, other: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::hypot(x, other));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_j0_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::j0);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_j1_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::j1);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_lgamma_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::lgamma);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_ln_1p_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::ln_1p);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_ln_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::ln);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_log10_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::log10);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_log2_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::log2);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_log_array2(ex_array: ExFloat64Array2, base: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::log(x, base));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_mul_add_array2(ex_array: ExFloat64Array2, a: f64, b: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::mul_add(x, a, b));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_powf_array2(ex_array: ExFloat64Array2, n: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::powf(x, n));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_powi_array2(ex_array: ExFloat64Array2, n: i32) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::powi(x, n));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_rem_euclid_array2(ex_array: ExFloat64Array2, rhs: f64) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(|x| f64::rem_euclid(x, rhs));
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_round_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::round);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_round_ties_even_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::round_ties_even);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_sin_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::sin);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_sinh_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::sinh);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_sqrt_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::sqrt);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_tan_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::tan);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_tanh_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::tanh);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_trunc_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(f64::trunc);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_y0_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::y0);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_y1_array2(ex_array: ExFloat64Array2) -> ExFloat64Array2 {
    let array: &Array2<f64> = &ex_array.resource.0;
    let result: Array2<f64> = array.mapv(libm::y1);
    ExFloat64Array2::new(result)
}

#[rustler::nif]
pub fn float64_acos_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::acos);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_acosh_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::acosh);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_asin_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::asin);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_asinh_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::asinh);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_atan2_array3(ex_array: ExFloat64Array3, other: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::atan2(x, other));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_atan_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::atan);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_atanh_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::atanh);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_cbrt_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::cbrt);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_ceil_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::ceil);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_cos_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::cos);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_cosh_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::cosh);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_div_euclid_array3(ex_array: ExFloat64Array3, rhs: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::div_euclid(x, rhs));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_erf_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::erf);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_erfc_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::erfc);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_exp2_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::exp2);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_exp_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::exp);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_exp_m1_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::exp_m1);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_floor_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::floor);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_fract_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::fract);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_hypot_array3(ex_array: ExFloat64Array3, other: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::hypot(x, other));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_j0_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::j0);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_j1_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::j1);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_lgamma_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::lgamma);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_ln_1p_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::ln_1p);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_ln_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::ln);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_log10_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::log10);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_log2_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::log2);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_log_array3(ex_array: ExFloat64Array3, base: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::log(x, base));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_mul_add_array3(ex_array: ExFloat64Array3, a: f64, b: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::mul_add(x, a, b));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_powf_array3(ex_array: ExFloat64Array3, n: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::powf(x, n));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_powi_array3(ex_array: ExFloat64Array3, n: i32) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::powi(x, n));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_rem_euclid_array3(ex_array: ExFloat64Array3, rhs: f64) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(|x| f64::rem_euclid(x, rhs));
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_round_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::round);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_round_ties_even_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::round_ties_even);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_sin_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::sin);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_sinh_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::sinh);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_sqrt_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::sqrt);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_tan_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::tan);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_tanh_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::tanh);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_trunc_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(f64::trunc);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_y0_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::y0);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_y1_array3(ex_array: ExFloat64Array3) -> ExFloat64Array3 {
    let array: &Array3<f64> = &ex_array.resource.0;
    let result: Array3<f64> = array.mapv(libm::y1);
    ExFloat64Array3::new(result)
}

#[rustler::nif]
pub fn float64_acos_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::acos);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_acosh_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::acosh);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_asin_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::asin);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_asinh_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::asinh);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_atan2_array4(ex_array: ExFloat64Array4, other: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::atan2(x, other));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_atan_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::atan);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_atanh_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::atanh);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_cbrt_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::cbrt);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_ceil_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::ceil);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_cos_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::cos);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_cosh_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::cosh);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_div_euclid_array4(ex_array: ExFloat64Array4, rhs: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::div_euclid(x, rhs));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_erf_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::erf);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_erfc_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::erfc);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_exp2_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::exp2);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_exp_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::exp);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_exp_m1_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::exp_m1);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_floor_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::floor);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_fract_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::fract);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_hypot_array4(ex_array: ExFloat64Array4, other: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::hypot(x, other));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_j0_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::j0);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_j1_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::j1);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_lgamma_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::lgamma);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_ln_1p_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::ln_1p);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_ln_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::ln);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_log10_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::log10);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_log2_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::log2);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_log_array4(ex_array: ExFloat64Array4, base: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::log(x, base));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_mul_add_array4(ex_array: ExFloat64Array4, a: f64, b: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::mul_add(x, a, b));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_powf_array4(ex_array: ExFloat64Array4, n: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::powf(x, n));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_powi_array4(ex_array: ExFloat64Array4, n: i32) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::powi(x, n));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_rem_euclid_array4(ex_array: ExFloat64Array4, rhs: f64) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(|x| f64::rem_euclid(x, rhs));
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_round_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::round);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_round_ties_even_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::round_ties_even);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_sin_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::sin);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_sinh_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::sinh);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_sqrt_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::sqrt);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_tan_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::tan);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_tanh_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::tanh);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_trunc_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(f64::trunc);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_y0_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::y0);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_y1_array4(ex_array: ExFloat64Array4) -> ExFloat64Array4 {
    let array: &Array4<f64> = &ex_array.resource.0;
    let result: Array4<f64> = array.mapv(libm::y1);
    ExFloat64Array4::new(result)
}

#[rustler::nif]
pub fn float64_acos_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::acos);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_acosh_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::acosh);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_asin_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::asin);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_asinh_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::asinh);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_atan2_array5(ex_array: ExFloat64Array5, other: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::atan2(x, other));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_atan_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::atan);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_atanh_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::atanh);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_cbrt_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::cbrt);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_ceil_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::ceil);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_cos_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::cos);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_cosh_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::cosh);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_div_euclid_array5(ex_array: ExFloat64Array5, rhs: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::div_euclid(x, rhs));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_erf_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::erf);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_erfc_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::erfc);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_exp2_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::exp2);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_exp_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::exp);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_exp_m1_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::exp_m1);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_floor_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::floor);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_fract_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::fract);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_hypot_array5(ex_array: ExFloat64Array5, other: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::hypot(x, other));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_j0_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::j0);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_j1_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::j1);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_lgamma_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::lgamma);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_ln_1p_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::ln_1p);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_ln_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::ln);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_log10_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::log10);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_log2_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::log2);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_log_array5(ex_array: ExFloat64Array5, base: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::log(x, base));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_mul_add_array5(ex_array: ExFloat64Array5, a: f64, b: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::mul_add(x, a, b));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_powf_array5(ex_array: ExFloat64Array5, n: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::powf(x, n));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_powi_array5(ex_array: ExFloat64Array5, n: i32) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::powi(x, n));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_rem_euclid_array5(ex_array: ExFloat64Array5, rhs: f64) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(|x| f64::rem_euclid(x, rhs));
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_round_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::round);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_round_ties_even_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::round_ties_even);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_sin_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::sin);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_sinh_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::sinh);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_sqrt_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::sqrt);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_tan_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::tan);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_tanh_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::tanh);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_trunc_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(f64::trunc);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_y0_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::y0);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_y1_array5(ex_array: ExFloat64Array5) -> ExFloat64Array5 {
    let array: &Array5<f64> = &ex_array.resource.0;
    let result: Array5<f64> = array.mapv(libm::y1);
    ExFloat64Array5::new(result)
}

#[rustler::nif]
pub fn float64_acos_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::acos);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_acosh_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::acosh);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_asin_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::asin);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_asinh_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::asinh);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_atan2_array6(ex_array: ExFloat64Array6, other: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::atan2(x, other));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_atan_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::atan);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_atanh_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::atanh);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_cbrt_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::cbrt);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_ceil_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::ceil);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_cos_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::cos);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_cosh_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::cosh);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_div_euclid_array6(ex_array: ExFloat64Array6, rhs: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::div_euclid(x, rhs));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_erf_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::erf);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_erfc_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::erfc);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_exp2_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::exp2);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_exp_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::exp);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_exp_m1_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::exp_m1);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_floor_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::floor);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_fract_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::fract);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_hypot_array6(ex_array: ExFloat64Array6, other: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::hypot(x, other));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_j0_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::j0);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_j1_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::j1);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_lgamma_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::lgamma);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_ln_1p_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::ln_1p);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_ln_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::ln);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_log10_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::log10);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_log2_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::log2);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_log_array6(ex_array: ExFloat64Array6, base: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::log(x, base));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_mul_add_array6(ex_array: ExFloat64Array6, a: f64, b: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::mul_add(x, a, b));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_powf_array6(ex_array: ExFloat64Array6, n: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::powf(x, n));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_powi_array6(ex_array: ExFloat64Array6, n: i32) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::powi(x, n));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_rem_euclid_array6(ex_array: ExFloat64Array6, rhs: f64) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(|x| f64::rem_euclid(x, rhs));
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_round_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::round);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_round_ties_even_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::round_ties_even);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_sin_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::sin);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_sinh_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::sinh);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_sqrt_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::sqrt);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_tan_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::tan);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_tanh_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::tanh);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_trunc_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(f64::trunc);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_y0_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::y0);
    ExFloat64Array6::new(result)
}

#[rustler::nif]
pub fn float64_y1_array6(ex_array: ExFloat64Array6) -> ExFloat64Array6 {
    let array: &Array6<f64> = &ex_array.resource.0;
    let result: Array6<f64> = array.mapv(libm::y1);
    ExFloat64Array6::new(result)
}

