// ==================================================================================
// THIS FILE HAS BEEN AUTOGENERATED - Do not edit directly
// ----------------------------------------------------------------------------------
// Edit the template at 'priv/rust_generator/templates/math_functions.rs' instead
// ==================================================================================

use ndarray::{Array1, Array2, Array3, Array4, Array5, Array6};
use libm;
use crate::datatypes::*;


#[rustler::nif]
pub fn float32_acos_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::acos);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_acosh_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::acosh);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_asin_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::asin);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_asinh_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::asinh);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_atan2_array1(ex_array: ExFloat32Array1, other: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::atan2(x, other));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_atan_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::atan);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_atanh_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::atanh);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_cbrt_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::cbrt);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_ceil_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::ceil);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_cos_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::cos);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_cosh_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::cosh);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_div_euclid_array1(ex_array: ExFloat32Array1, rhs: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::div_euclid(x, rhs));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_erf_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::erff);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_erfc_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::erfcf);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_exp2_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::exp2);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_exp_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::exp);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_exp_m1_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::exp_m1);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_floor_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::floor);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_fract_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::fract);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_hypot_array1(ex_array: ExFloat32Array1, other: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::hypot(x, other));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_j0_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::j0f);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_j1_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::j1f);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_lgamma_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::lgammaf);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_ln_1p_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::ln_1p);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_ln_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::ln);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_log10_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::log10);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_log2_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::log2);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_log_array1(ex_array: ExFloat32Array1, base: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::log(x, base));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_mul_add_array1(ex_array: ExFloat32Array1, a: f32, b: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::mul_add(x, a, b));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_powf_array1(ex_array: ExFloat32Array1, n: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::powf(x, n));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_powi_array1(ex_array: ExFloat32Array1, n: i32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::powi(x, n));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_rem_euclid_array1(ex_array: ExFloat32Array1, rhs: f32) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(|x| f32::rem_euclid(x, rhs));
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_round_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::round);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_round_ties_even_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::round_ties_even);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_sin_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::sin);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_sinh_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::sinh);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_sqrt_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::sqrt);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_tan_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::tan);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_tanh_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::tanh);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_trunc_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(f32::trunc);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_y0_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::y0f);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_y1_array1(ex_array: ExFloat32Array1) -> ExFloat32Array1 {
    let array: &Array1<f32> = &ex_array.resource.0;
    let result: Array1<f32> = array.mapv(libm::y1f);
    ExFloat32Array1::new(result)
}

#[rustler::nif]
pub fn float32_acos_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::acos);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_acosh_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::acosh);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_asin_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::asin);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_asinh_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::asinh);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_atan2_array2(ex_array: ExFloat32Array2, other: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::atan2(x, other));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_atan_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::atan);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_atanh_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::atanh);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_cbrt_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::cbrt);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_ceil_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::ceil);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_cos_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::cos);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_cosh_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::cosh);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_div_euclid_array2(ex_array: ExFloat32Array2, rhs: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::div_euclid(x, rhs));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_erf_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::erff);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_erfc_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::erfcf);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_exp2_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::exp2);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_exp_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::exp);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_exp_m1_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::exp_m1);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_floor_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::floor);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_fract_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::fract);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_hypot_array2(ex_array: ExFloat32Array2, other: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::hypot(x, other));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_j0_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::j0f);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_j1_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::j1f);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_lgamma_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::lgammaf);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_ln_1p_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::ln_1p);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_ln_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::ln);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_log10_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::log10);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_log2_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::log2);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_log_array2(ex_array: ExFloat32Array2, base: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::log(x, base));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_mul_add_array2(ex_array: ExFloat32Array2, a: f32, b: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::mul_add(x, a, b));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_powf_array2(ex_array: ExFloat32Array2, n: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::powf(x, n));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_powi_array2(ex_array: ExFloat32Array2, n: i32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::powi(x, n));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_rem_euclid_array2(ex_array: ExFloat32Array2, rhs: f32) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(|x| f32::rem_euclid(x, rhs));
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_round_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::round);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_round_ties_even_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::round_ties_even);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_sin_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::sin);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_sinh_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::sinh);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_sqrt_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::sqrt);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_tan_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::tan);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_tanh_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::tanh);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_trunc_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(f32::trunc);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_y0_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::y0f);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_y1_array2(ex_array: ExFloat32Array2) -> ExFloat32Array2 {
    let array: &Array2<f32> = &ex_array.resource.0;
    let result: Array2<f32> = array.mapv(libm::y1f);
    ExFloat32Array2::new(result)
}

#[rustler::nif]
pub fn float32_acos_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::acos);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_acosh_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::acosh);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_asin_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::asin);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_asinh_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::asinh);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_atan2_array3(ex_array: ExFloat32Array3, other: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::atan2(x, other));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_atan_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::atan);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_atanh_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::atanh);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_cbrt_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::cbrt);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_ceil_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::ceil);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_cos_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::cos);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_cosh_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::cosh);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_div_euclid_array3(ex_array: ExFloat32Array3, rhs: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::div_euclid(x, rhs));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_erf_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::erff);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_erfc_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::erfcf);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_exp2_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::exp2);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_exp_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::exp);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_exp_m1_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::exp_m1);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_floor_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::floor);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_fract_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::fract);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_hypot_array3(ex_array: ExFloat32Array3, other: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::hypot(x, other));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_j0_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::j0f);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_j1_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::j1f);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_lgamma_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::lgammaf);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_ln_1p_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::ln_1p);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_ln_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::ln);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_log10_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::log10);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_log2_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::log2);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_log_array3(ex_array: ExFloat32Array3, base: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::log(x, base));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_mul_add_array3(ex_array: ExFloat32Array3, a: f32, b: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::mul_add(x, a, b));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_powf_array3(ex_array: ExFloat32Array3, n: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::powf(x, n));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_powi_array3(ex_array: ExFloat32Array3, n: i32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::powi(x, n));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_rem_euclid_array3(ex_array: ExFloat32Array3, rhs: f32) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(|x| f32::rem_euclid(x, rhs));
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_round_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::round);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_round_ties_even_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::round_ties_even);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_sin_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::sin);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_sinh_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::sinh);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_sqrt_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::sqrt);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_tan_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::tan);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_tanh_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::tanh);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_trunc_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(f32::trunc);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_y0_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::y0f);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_y1_array3(ex_array: ExFloat32Array3) -> ExFloat32Array3 {
    let array: &Array3<f32> = &ex_array.resource.0;
    let result: Array3<f32> = array.mapv(libm::y1f);
    ExFloat32Array3::new(result)
}

#[rustler::nif]
pub fn float32_acos_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::acos);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_acosh_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::acosh);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_asin_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::asin);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_asinh_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::asinh);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_atan2_array4(ex_array: ExFloat32Array4, other: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::atan2(x, other));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_atan_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::atan);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_atanh_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::atanh);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_cbrt_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::cbrt);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_ceil_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::ceil);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_cos_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::cos);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_cosh_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::cosh);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_div_euclid_array4(ex_array: ExFloat32Array4, rhs: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::div_euclid(x, rhs));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_erf_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::erff);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_erfc_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::erfcf);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_exp2_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::exp2);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_exp_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::exp);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_exp_m1_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::exp_m1);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_floor_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::floor);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_fract_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::fract);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_hypot_array4(ex_array: ExFloat32Array4, other: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::hypot(x, other));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_j0_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::j0f);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_j1_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::j1f);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_lgamma_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::lgammaf);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_ln_1p_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::ln_1p);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_ln_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::ln);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_log10_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::log10);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_log2_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::log2);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_log_array4(ex_array: ExFloat32Array4, base: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::log(x, base));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_mul_add_array4(ex_array: ExFloat32Array4, a: f32, b: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::mul_add(x, a, b));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_powf_array4(ex_array: ExFloat32Array4, n: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::powf(x, n));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_powi_array4(ex_array: ExFloat32Array4, n: i32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::powi(x, n));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_rem_euclid_array4(ex_array: ExFloat32Array4, rhs: f32) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(|x| f32::rem_euclid(x, rhs));
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_round_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::round);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_round_ties_even_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::round_ties_even);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_sin_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::sin);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_sinh_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::sinh);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_sqrt_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::sqrt);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_tan_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::tan);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_tanh_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::tanh);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_trunc_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(f32::trunc);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_y0_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::y0f);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_y1_array4(ex_array: ExFloat32Array4) -> ExFloat32Array4 {
    let array: &Array4<f32> = &ex_array.resource.0;
    let result: Array4<f32> = array.mapv(libm::y1f);
    ExFloat32Array4::new(result)
}

#[rustler::nif]
pub fn float32_acos_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::acos);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_acosh_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::acosh);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_asin_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::asin);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_asinh_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::asinh);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_atan2_array5(ex_array: ExFloat32Array5, other: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::atan2(x, other));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_atan_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::atan);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_atanh_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::atanh);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_cbrt_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::cbrt);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_ceil_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::ceil);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_cos_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::cos);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_cosh_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::cosh);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_div_euclid_array5(ex_array: ExFloat32Array5, rhs: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::div_euclid(x, rhs));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_erf_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::erff);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_erfc_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::erfcf);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_exp2_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::exp2);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_exp_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::exp);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_exp_m1_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::exp_m1);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_floor_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::floor);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_fract_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::fract);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_hypot_array5(ex_array: ExFloat32Array5, other: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::hypot(x, other));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_j0_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::j0f);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_j1_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::j1f);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_lgamma_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::lgammaf);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_ln_1p_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::ln_1p);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_ln_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::ln);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_log10_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::log10);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_log2_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::log2);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_log_array5(ex_array: ExFloat32Array5, base: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::log(x, base));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_mul_add_array5(ex_array: ExFloat32Array5, a: f32, b: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::mul_add(x, a, b));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_powf_array5(ex_array: ExFloat32Array5, n: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::powf(x, n));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_powi_array5(ex_array: ExFloat32Array5, n: i32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::powi(x, n));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_rem_euclid_array5(ex_array: ExFloat32Array5, rhs: f32) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(|x| f32::rem_euclid(x, rhs));
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_round_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::round);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_round_ties_even_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::round_ties_even);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_sin_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::sin);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_sinh_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::sinh);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_sqrt_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::sqrt);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_tan_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::tan);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_tanh_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::tanh);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_trunc_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(f32::trunc);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_y0_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::y0f);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_y1_array5(ex_array: ExFloat32Array5) -> ExFloat32Array5 {
    let array: &Array5<f32> = &ex_array.resource.0;
    let result: Array5<f32> = array.mapv(libm::y1f);
    ExFloat32Array5::new(result)
}

#[rustler::nif]
pub fn float32_acos_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::acos);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_acosh_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::acosh);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_asin_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::asin);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_asinh_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::asinh);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_atan2_array6(ex_array: ExFloat32Array6, other: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::atan2(x, other));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_atan_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::atan);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_atanh_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::atanh);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_cbrt_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::cbrt);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_ceil_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::ceil);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_cos_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::cos);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_cosh_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::cosh);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_div_euclid_array6(ex_array: ExFloat32Array6, rhs: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::div_euclid(x, rhs));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_erf_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::erff);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_erfc_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::erfcf);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_exp2_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::exp2);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_exp_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::exp);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_exp_m1_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::exp_m1);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_floor_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::floor);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_fract_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::fract);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_hypot_array6(ex_array: ExFloat32Array6, other: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::hypot(x, other));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_j0_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::j0f);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_j1_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::j1f);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_lgamma_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::lgammaf);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_ln_1p_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::ln_1p);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_ln_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::ln);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_log10_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::log10);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_log2_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::log2);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_log_array6(ex_array: ExFloat32Array6, base: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::log(x, base));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_mul_add_array6(ex_array: ExFloat32Array6, a: f32, b: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::mul_add(x, a, b));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_powf_array6(ex_array: ExFloat32Array6, n: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::powf(x, n));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_powi_array6(ex_array: ExFloat32Array6, n: i32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::powi(x, n));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_rem_euclid_array6(ex_array: ExFloat32Array6, rhs: f32) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(|x| f32::rem_euclid(x, rhs));
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_round_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::round);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_round_ties_even_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::round_ties_even);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_sin_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::sin);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_sinh_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::sinh);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_sqrt_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::sqrt);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_tan_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::tan);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_tanh_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::tanh);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_trunc_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(f32::trunc);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_y0_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::y0f);
    ExFloat32Array6::new(result)
}

#[rustler::nif]
pub fn float32_y1_array6(ex_array: ExFloat32Array6) -> ExFloat32Array6 {
    let array: &Array6<f32> = &ex_array.resource.0;
    let result: Array6<f32> = array.mapv(libm::y1f);
    ExFloat32Array6::new(result)
}

